int(void,public void,etc.) function name(int gfh,grh,ejh,...) - -prototype`s description


int main(){
	

}



int function_name(int h,f,...) - объявление ф-и
{
	-//-
	return -//-;

}


int function name(int gfh,grh,ejh,...)


1.Достижение конца функции(return число-чтобы узнать,что произошло(1-ошибка,2-не тот знак,и тд) или выражение)
2.break;

правила видимости имен в функции 

переменная,объявленная внутри функции,видна только внутри её

локальная переменная создаётся при входе в функцию,и уничтожается при выходе из неё

глобальная переменная живут столько же,сколько и сама программа
static-просмотреть
переменные,которые написаны в заголовке функции,ведут себя как и обычные локальные переменные данной функции
разные функции-имена одинаковые локальных переменных
приоритет имеют локальные функции

void f(int a)
{
	x=a+a;
	cout<<x;
	return 0;
}

int main()
{
	f(10);
}
способы передачи параметров в функции:
1.передача параметров по значению 
при этом способе значение фактического параметра копируется в формальный параметр подпрограммы,после чего связь формального и фактического параметров прерывается
изменения,сделанные в формальном параметре,не влияют на значение переменной,используемой при вызове
2.по адресу
в формальный параметр вызываемой подпрограммы передаётся адрес переменной.в подпрограмме этот адрес используется для доступа к настоящему,фактическому параметру.изменения в формальном параметре-происходят и в переменной,используемой при вызове:
int &xref=x
xref++ - the same for x++



prototype - void f3(int,int,int&,int&);








