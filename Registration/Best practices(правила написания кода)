Best practices(правила написания кода)

1.Табуляция

каждый блок где открылся - там и закрылся
внутреннее содержимое - одним разделителем от границ
получится иерархическая архитектура

2.Названия переменных и методов должно отображать суть того,что они хранят и делают 
Используется верблюжья нотация - javaScriptOrangeApple

в идеале названия ПЕРЕМЕННЫХ(!!!) - существительное
AppleList
Users
Data
Tags

названия методов - с глаголов;остальные слова - как пойдёт


код функции - 40 строчек на среднем разрешении максимум  

был флешмоб - 40 строчек кода - уместить решение задачи'

одна функция - одно действие

Пирамида смерти - имеет место только в JS;обобщает понятие плохого кода,который содержит в себе множество асинхронных методов

var handle=function(){
	("",function(){
				for(){
					...
				}
			})
}


function(){
...(function(){
		(function(){
			handle()
		})
	})
}


14 уровней - на 7 и 8 делить

3)бизнес-логика:
бизнес-логика - что приложение должно делать
техническая логика - как;все,чем мы можем пользоваться
разделять техническую логику и бизнес-логику;технической логике - не обязательно знать,что делает бизнес-логика

4)Отказ от переопределения глобальных сущностей;Не засорять глобальную область видимости!!!

глобальная область видимости - то,выше чего ничего нет.инкапсулируется - при помощи объекта window


5) Использовать одну точку входа в приложение

пространства имён


var App={
	init:function(){
		App.setEventListeners();
	}
	,setEventListener(){

	}
}

App.init()


6)Константы значений


var App={
	init:function(){
		App.setEventListeners();
	}
	,setEventListener:functions(){}
	,Constants:{
	CANVAS_WIDTH:350
	,CANVAS_HEIGHT:500
	}
}


google.maps.MAP()

(function(){
	
})()

7) Связность кода

связность - два участка кода связаны друг с другом,если для работы каждый из них должен знать,что существует второй

связность HTML и JS

<input onclick='func()'/>

<script>

...

</script>


elem.innerHTML+="<li>...</li>";

CSS <- JS

Создать в CSS класс и через JS менять в нём

.class
{
	...
}


elem.classList

7) Быстродействие кода
использование алгоритма,неоптимального для данной ситуации - ухудшает быстродействие кода

неявно лишние вычисления


function(){
	(function(){
	//var d=document;
	var elem=document.getElementById('')
	for(i=0;i<1000;i++){
	document.getElementById('')->elem... <-неявное,идти вверх
	})(...)
	})
}



arr=[...];
var l=arr.length;
for(var i=0;i<l;i++)
{
	
}

var s="";
for(i=0,l=arr.length;i<l;i++){
s+='<li>...</li>'
	//elem.innerHTML+=
	"<li>...</li>"
	//elem.innerHTML=elem.innerHTML+"<li>...</li>"
}

elem.innerHTML=s;

дозапись - при помощи appendChild


объявление a=1,b=2,c=[] - быстрее,чем каждому по отдельности
var x=[1,2,3,4,5]
var 0={a:'b',c:'d'} - быстрее через литералы,чем через конструктор - т.е. лучше так,а потом-доопределить

var o=new object{

}



минификация - обычное сжатие(удаление комментариев,строк и тд)
обфускация - обычное сжатие и перепись кода - переименование переменных,изменение алгоритмов,и тд 
minify JS
сжатие кода - операция,в которой мы участия не принимаем(делает сервер или браузер) - сервер сжимает файл в архив,браузер - распаковывает - обычно используется gzip сжатие




Исключения

throw(new Error("Incorrect number"))


try{
	Code,that can create an Error
} catch(e){
	if mistake-then did
}finally{
	
}





Open Sans
Roboto
Helvetica
Lato
PT Sans



