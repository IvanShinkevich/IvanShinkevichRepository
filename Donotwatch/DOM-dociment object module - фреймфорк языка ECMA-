DOM-dociment object module - фреймфорк языка ECMA-script(JavaScript),позволяющий изменять html-документ
framework - набор библиотек,написанных при помощи стандартных средств языка,позволяющий реализовывать конкретный функционал

Node - объект.хранит 11 констант,указывающие на тип переменных
.ELEMENT_NODE - ТЕГИ
.ATTRIBUTE_NODE -АТРИБУТЫ
.TEXT_NODE - ОБЫЧНЫЙ ТЕКСТ
.CDATA_SECTION_NODE - СЕКЦИЯ CDATA
.DOCUMENT_TYPE_NODE - ТО,ЧТО ОТНОСИТСЯ К ТИПУ ДОКУМЕНТА
.COMMENT_NODE - КОММЕНТАРИИ
.DOCUMENT_NODE - ДОКУМЕНТ(все,что относится к нашей веб-странице)


shadowdome


любой элемент любого перечисленного выше типа представляет объект
#document
[<!doctype html>
<html>
</html>] - документ(глобальная область видимости для всей страницы)
document.title - хранит в себе заголовок - можно прочитать и перезадать
чтобы получить тег-нужен идентификатор
var elem=document.getElementById("first");

elem.innerHTML="Hello"; - задавать/изменять можем html код;тут-перезаписали
elem.innerText="Hello,<b>User</b>" - вставляется как текст(теги,и все прочее-остаётся видно,т.е. Hello,<b>User</b>)

elem.parentNode - хранит в себе объект типа элемент,который является родительским,который хранит свой родительский,и так-до объекта Document
.nextSibling - следующий и предыдущий элементы
.previousSibling -//-
.outerHTML - как иннерХТМЛ,так и сам тег
.value - то,что внутри одинарного тега

.lastChild - последний из потомков
.firstChild

.getAttribute(s) - вернет значение атрибута s; .getAt("type") ->"text"
.setAttribute(s,v) - заменит тип
.removeAttribute(s) - удалит аттрибут,и произойдёт всё,что из этого следует

NodeList,HTMLCollection - это что-то вроде интерактивного массива.при обращении каждый раз пересчитывает то,что в нём находится
Хотим получить элементы,у которых задан определенный класс,тег,и тд.
var x=document.getElementsByTagName("div");
.getElementsByClassName("cl");

x[3]-можно.

!!!ВАЖНО!!! ОБЪЕКТ HTMLCOLLECTION ПЕРЕСЧИТЫВАЕТСЯ КАЖДЫЙ РАЗ ЗАНОВО!!!!!!!!

можно после добавления нового элемента просто вызвать x

Манипуляции в DOM 
var elem=document.createElement("div");
e2=document.createElement("p");
elem.appendChild(e2);
el3.appendChild(elem); - el3 - существующий в html-странице элемент

elem.removeChild(el2); - родительский элемент должен вызвать метод на своём ребенке!ребенок не может удалить себя сам!

elem.insertBefore(el,el_before);

var elem=document.createElement("div");
e2=document.createElement("p");
elem.replaceChild(new_elem,which_elem)

var c=elem.cloneNode();

var c=elem.cloneNode(true) -клонирует все вложенные клонированные элементы не наследуют обработчики событий и ещё что-то

elem.childNodes - все дочерние элементы(текст,комменты,и тд.)                		 elem.children - все дочерние эл-ты,являющиеся html-тегами

elem.scrollIntoView() - прокрутится так,чтобы эл-т был в зоне видимости


1.Таблицу с характеристиками вынести в html и заполнять только ячейки с х-ками через .js
2.Создать функцию,которая принимает s секунд и задаёт перерисованный таймер обратного отсчёта,в конце делая alert
+
1:функция принимает в себя s и f-функцию,которая вызывается,когда таймер доходит до 0;
3.Создать генератор комментариев заказов о покупке
+
1:Оформить комментарии в приемлемом виде средствами CSS,возле каждого выводить дату генерации
4.Написать развернутые ответы на вопросы теста



генератор должен иметь следующую структуру:
["Георгий","Ипполит",...] - массив имен
массив с названиями городов(в Р.П.-падеже)
названия товаров(["Стул 150",...])
Дата  ->Алевтин(подстановка) из витебска() заказал 10(рандом) штук товара Стол Maxi()
в html окошке сгенерировано окошко с комментом,оно-не удаляется,а добавляется ещё одно,ещё одна и тд-над данным
интервал 10-15 секунд
+1:чтобы в каждом комментарии картинка случайным образом вставлялась(аватарка пользовател
ей)-могут повторяться.забить картинку в массив - просто путь к картинке в массив,дальше - создать новый эл-т и присваивать номера эл-тов массива(или ссыли,и тд)












