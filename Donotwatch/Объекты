Объекты
Объект представляет собой структуру,В которой находятся поля и методы
(массив-упорядоченный набор эл-тов)
паттерн-общепризнанный подход,методология
чтобы сделать объект:
var Alex:{
	height:400,
	weight:155,
	sex:"m",
	можно и в кавычках ->"age":914,
	"name":"Alex",
	sayHi: function(){alert()} - точка с запятой не нужна!
}

чтобы использовать данные объекта:
Alex.weight=70;
вызвать метод:
Alex.sayHi();
Есть два типа данных:объекты и undefined;
var n=10;
n.to Fixed(2) - число с двумя знаками после запятой
n.toExponential(3)-в стандартном виде
n.toPrecision(7) - больше знаков после запятой
n.toString() - переводит в строку

"Alex".length - длина строки в символах
.charAt(n) - символ на позиции n
.charCodeAt(n) - код/номер символа
.endsWith(s) - возвращается правда/ложь если строка оканчивается на s
.trimLeft() .trimRight() - обрезка строки слева/справа
.trim() - обрезка с двух сторон строки
.toUpperCase() - преобразование в верхний регистр строки
.toLowerCase() - преобразование в нижний регистр строки
.substr(from,len) - возвращает подстроку(была строка "123456789" - вернет строку длиной len,которая начинается с символа from - нумерация от 0 - 0,1,2,3 и тд.;если указать len больше-то норм,пофигу)
.substring(from,to) - от одного символа до другого,не включая конец!
.slice(from,to) - синоним к substring()
.indexOf(s) - вернет позицию в строке,с которой начинается подстрока s
.includes(s) - вернет true/false,в зависимости от того,есть ли в строке подстрока,как переданная в метод
.split(s) - осуществляет разбиение строки по разделителю в массив("1;2;3;4".split(";" - получим 1,2,3 и 4)
.search(r) - индекс первого вхождения заданной строки или шаблона(в т.ч. регулярного выражения,может вернуть и массив индексов)
.replace(r,s) - замещает r на s в строке
.repeat(n) - "a".repeat(4)->"aaaa" - предыдущая строка повторена n раз
[n] - индексация-получение строки по индексу


ЭЛЕМЕНТЫ СЧИТАЮТСЯ С НУЛЯ В С-ПОДОБНЫХ ЯЗЫКАХ!!!!!!


все эти методы не изменяют оригинальную строку!!!
var a="Alex"
a.toUpperCase()
console.log(a) - не меняется

a[0]=a.length(0)!!!!!!! Индексация-быстрее,.charAt()- вызывает индексацию внутри себя!!!!

Массивы
все массивы имеют тип object
у массива можно вызывать свои методы и свои поля
все массивы в джс имеют разную длину
все эл-ты могут быть разного типа данных
new Array(n) - n-кол-во эл-тов undefined
new Array(x1,x2,...)
var a=[1,2,3,4,5]
<- - изменяют сам эл-т массива
.push(x1[,x2,...]) - запихивает эл-т(ы) в конец массива,в том порядке,в котором они указаны в скобках <-
.unshift(x1[,x2,...]) - запихивает в начало  <-
.reverse() - меняет порядок эл-тов в массиве на обратный
.shift() -      <-первый эл-т удаляет и возвращает массив 
.pop()        <- с конца удаляет эл-т и возвращает массив
.length - возвращает одномерное кол-во эл-тов в массиве.Одномерное-т.е. если эл-т  - массив,то он считается 1 штукой.
.join(s) - склеивает эл-ты массива и расставляет между ними разделитель s - "12345".join(",") = "1,2,3,4,5"
.slice(from,to) - считает от одного символа до другого,не включая конец!
.splice(start[,count,[x1...) - заменить один кусок массива на другой - ['A','B','C','D','E'].splice(2,1,"x","y","z") = ["C"]
.sort([f]) - сортирует массив a.sort() - сам сортируется либо по лексико-графическому  a.sort(func);
.indexOf(e) - то же,что и для строк.если вхождения нет- возвращает (-1)

Математический модуль
существует объект Math - есть набор методов:
Math(везде писать Math.функция(аргумент)).sqrt(x)
.sin(x)
.cos(x)
.abs(x)
.ceil(x) - округляет в верхнюю сторону
.floor(x) - в нижнюю
.round(x) - по правилам округления
.pow(x,d) - возводит х в степень d(возможно дробное)
.random() - случайное число от 0 до 1
Поля:
Math.PI - число пипга78гшн8п9ащщзщзап6з09097шга78а8шга85еапн8щ9
.SQRT2 - корень из двух
.E - 	е - основание натурального логарифма-экспонента
.LOG10E - десятичный логарифм е
.LOG2E - логарифм e по основанию 2

console.log.c.toString()

Метки времени.Date
позволяет в компьютере хранить точку во времени
"2005-10-31 10:00:12:37" - строкой
Метка времени-это такое число,которое показывает кол-во миллисекунд с 1 января 1970 (- зарождение эпохи Unix)
1417....... - примерно так наша дата выглядит
в джс существует объект(функция),позволяющий работать с датой(временем):
Date()
Date.now() - в миллисекундах
создать объект даты:
 var d = new Date() - хранит время создания объекта
 var d = new Date("2010-10-30 10:28:17:10") - своё время ---  выводить можно по-разному
Методы объекта d:
d.getDate()
.getDay()
.getMonth()
.getYear() -     110   70<-1970   - метод возвращает время,идущее с 1900 года
.getFullYear() - 2010
.getHours()
.getMinutes()
.getSeconds()
.getMilliseconds()
.getTime() - с момента создания

менять что-либо в d:
d.set-//-
.
.
.
оценка производительности кода
сортировка "пузырьком"

24*60*60=86400 - количество секунд в одних сутках


задать дату до и после кода для определения скорости работы!

ДЗ - вернет случайное (целое) число от a до b
*сделать реализацию кода без явного определения массива(это нужно сделать в цикле)

